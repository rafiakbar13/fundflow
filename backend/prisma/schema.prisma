// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique
  name     String?
  password String
  photo    String?
  phone    String?

  goals        Goals[]
  expenses     Expenses[]
  bills        Bills[]
  revenues     Revenue[]
  transactions Transaction[]
  accounts     Account[]
  categories   Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goals {
  id String @id @unique @default(cuid())

  targetAmount  Int?
  presentAmount Int?
  from          DateTime?
  to            DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expenses {
  id     String  @id @default(cuid())
  name   String?
  amount Int?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  budget       Int
  expenses     Expenses[]
  revenues     Revenue[]
  transactions Transaction[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bills {
  id      String    @id @default(cuid())
  name    String?
  amount  Int?
  dueDate DateTime?
  paid    Boolean?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  description String?
  amount      Int?
  type        String // "income" or "expense"
  status      String // "completed", "pending", "failed"
  date        DateTime @default(now())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id],onDelete: Cascade, onUpdate: Cascade)

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Revenue {
  id     String  @id @default(cuid())
  name   String?
  amount Int?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id         String @id @default(cuid())
  methodName String

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id            String @id @default(cuid())
  bankName      String
  type          String
  balance       Int
  accountNumber String

  transactions Transaction[] 

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
